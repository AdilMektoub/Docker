---
#############################################################
# création de recettes pour automatiser installation des outils
# configuration des serveurs web
# se connecter au serveur
#nom de la liste 
- name: Installation des serveurs web
#nom du groupe
  hosts: web
# login par default par l'hebergeur
  remote_user: root
  #création variable pour utilisateur ou autre
  vars:
    user: adil
  

##############################################################
  #defini les taches
tasks:
    #installation de ... sur site de ansible "module Index" "packaging module"
    #je vais definir l'ensemble des taches
    #donc on a besoin name et update_cache (pour avant lancer la commande apt-get update)
    - name: installation ...
      apt: name=... update_cache=yes
    #pour les autres installations pas besoin de mettre update.cache car il a déjà fait
    - name: installation ...
      apt: name=...
    #ETC.....
    #on lance sur la cmder "ansible-playbook -i hosts playbook.yml" (-i pour préciser le fichier hosts à utliliser)

    # MAIS c'est trop long donc nouvelle méthode trouver
    # pour chaque élements de notre boucle tu installes (state = derniere version)
    apt: name={{ item }} update_cache=yes state=latest 
    with_items: 
      -zsh
      -vim
    #etc...
  
    #crée un nouveau utilisateur "site ansible - module index - system module"
    - name: création d'un user
    #quand user est definie
      when: user is defined
      user: name={{ user }} comment="c'est moi" shell=/usr/bin/zsh
  #se connecte à notre utilisateur avec SSH
    name: Ajout de la clef SSH
    #quand user est défini
    when: user is defined
  #copié automatiquement la clef dans le systeme "site ansible - authorized keys"
      authorized_key: user={{ user }} key="{{ lookup('file', '~/.ssh/id_rsa.pub')}}"
  #on lance "ansible-playbook -i hosts playbook.yml"


    roles:
    - user
    - nginx

# j'inclue des fichiers qui vont contenir des variables et ce fichier va depender de l'OS (system exploitation)
- name: Add the OS specific variables
  include_vars: "{{ ansible_os_family }}.yml" 

#MySQL
-- name: Install the mysql packages in Redhat derivatives
  yum: name={{ item }} state=installed 
  with_items:
    - "{{ mysql_pkgs }}"
  when: ansible_os_family == 'RedHat'
# configuration des serveurs DB
  # finit par 3 points
  ...